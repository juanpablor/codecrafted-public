{"version":3,"file":"component---src-templates-blog-post-tsx-43b614be095cc0e909b3.js","mappings":"kSAiDA,MAnCkCA,IAAqC,IAApC,MAAEC,EAAK,KAAEC,EAAI,QAAEC,EAAO,KAAEC,GAAMJ,EAC/D,MAAM,EAAEK,EAAC,KAAEC,IAASC,EAAAA,EAAAA,kBAYdC,GAAgBC,EAAAA,EAAAA,GAAO,IAAIC,KAAKR,GAAO,gBAAiB,CAC5DS,OAZiBC,KACjB,OAAQA,GACN,IAAK,KACH,OAAOC,EAAAA,EACT,IAAK,KACH,OAAOC,EAAAA,EACT,QACE,OAAOC,EAAAA,EACX,EAIQC,CAAUV,EAAKM,YAEnBK,EAAYC,EAAAA,EAAOd,GACzB,OACEe,EAAAA,cAAAA,EAAAA,SAAA,KAEAA,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,QAAME,KAAK,cAAclB,QAASE,EAAE,QAAQD,kBAAuB,KACnEe,EAAAA,cAAA,aAAQd,EAAE,QAAQD,aAGpBe,EAAAA,cAAA,WAASG,UAAU,2CACjBH,EAAAA,cAAA,MAAIG,UAAU,wBAAwBjB,EAAE,QAAQD,YAChDe,EAAAA,cAAA,QAAMG,UAAU,0BAA0Bd,GAC1CW,EAAAA,cAAA,OAAKG,UAAU,eAAeC,IAAKN,EAAUM,IAAKC,IAAKP,EAAUO,MACjEL,EAAAA,cAAA,OAAKM,wBAAyB,CAAEC,OAAQrB,EAAE,QAAQD,cAAmB,OAEpE,ECnCP,MAAMuB,E,QAAqB,GAoC3B,MAlCuB3B,IAEhB,IAFiB,KAAE4B,GAExB5B,EACA,MAAM,EAAEK,IAAME,EAAAA,EAAAA,kBACRsB,EAAOD,EAAKE,UAGlB,OAFAC,QAAQC,IAAI,gBAAiBJ,GAG3BT,EAAAA,cAACc,EAAAA,QAAM,CAACL,KAAMD,GACZR,EAAAA,cAACe,EAAI,CAACjC,MAAO4B,EAAK5B,MAAOC,KAAM2B,EAAK3B,KAAMC,QAAS0B,EAAK1B,QAASC,KAAMyB,EAAKzB,OACrE,C","sources":["webpack://corpo-code-crafted-studios/./src/components/Blog.tsx","webpack://corpo-code-crafted-studios/./src/templates/blog-post.tsx"],"sourcesContent":["import { useTranslation } from 'gatsby-plugin-react-i18next';\nimport React from 'react';\nimport { format } from 'date-fns';\nimport { es, fr, enUS, sl } from 'date-fns/locale';\nimport images from '../images';\nimport { Helmet } from 'react-helmet';\n\ninterface PostProps {\n  title: string;\n  date: string;\n  content: string;\n  slug: string;\n}\n\nconst Post: React.FC<PostProps> = ({ title, date, content, slug }) => {\n  const { t, i18n } = useTranslation();\n  const getLocale = (language: string) => {\n    switch (language) {\n      case 'es':\n        return es;\n      case 'fr':\n        return fr;\n      default:\n        return enUS;\n    }\n  };\n\n  const formattedDate = format(new Date(date), 'MMMM dd, yyyy', {\n    locale: getLocale(i18n.language),\n  });\n  const postImage = images[slug as keyof typeof images];\n  return (\n    <>\n    \n    <Helmet>\n      <meta name=\"description\" content={t(`blog.${slug}-description`) || ''} />\n      <title>{t(`blog.${slug}-title`)}</title>\n    </Helmet>\n\n    <article className='post-content flex flex-col items-center'>\n      <h1 className='text-3xl text-center'>{t(`blog.${slug}-title`)}</h1>\n      <span className='text-sm text-secondary'>{formattedDate}</span>\n      <img className='mx-auto my-4' src={postImage.src} alt={postImage.alt} />\n      <div dangerouslySetInnerHTML={{ __html: t(`blog.${slug}-excerpt`) || '' }} />\n    </article>\n    </>\n  );\n};\n\nexport default Post;","import { graphql } from 'gatsby';\nimport { useTranslation } from 'react-i18next';\nimport Layout from '../pages/layout';\nimport Post from '../components/Blog';\nimport { PageProps } from 'gatsby';\nimport React from 'react';\nimport { Company } from '../interfaces';\nimport data from \"../data/data.json\";\n\n\nconst info: Company = data[0];\n\nconst PostDetailPage = ({ data }: PageProps<{\n    postsJson: any; post: { title: string; date: string; content: string } \n}>) => {\n  const { t } = useTranslation();\n  const post = data.postsJson;\n  console.log(\"Page context:\", data);\n\n  return (\n    <Layout data={info}>\n      <Post title={post.title} date={post.date} content={post.content} slug={post.slug} />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query ($slug: String!, $language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    postsJson(slug: { eq: $slug }) {\n      title\n      slug\n      date\n      content\n    }\n  }\n`;\n\nexport default PostDetailPage;"],"names":["_ref","title","date","content","slug","t","i18n","useTranslation","formattedDate","format","Date","locale","language","es","fr","enUS","getLocale","postImage","images","React","Helmet","name","className","src","alt","dangerouslySetInnerHTML","__html","info","data","post","postsJson","console","log","Layout","Post"],"sourceRoot":""}